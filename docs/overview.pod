=head1 Extopus Overview

by Tobias Oetiker, L<tobi@oetiker.ch>

Extopus is an aggregating front end for monitoring systems. The basic
principal of operation is that extopus gathers static configuration
information from external monitoring systems and caches it for quick access.
As the user selects items, live data is presented, coming directly from the
external monitoring system.

=head2 Data Model

Extopus sees the world as a collection of nodes. Each node is a document made up from attribute names and values:

 location: Zurich
 type: port
 node-id: 38948
 snmp-community: 9asf8ff
 ip-address: 66.66.66.66
 friendly-name: Smile
 
There is no hierarchy, there are no required attributes. 

=head2 Data Access

Extopus supports two fundamental ways of accessing data: Search and Tree
navigation. A google like search function allows to quickly select nodes. A
configurable navigation tree is built by assigning particular attribute
values to tree nesting levels. The same node can appear multiple times in
the same tree.

A tree configuration could look like this:
 
 $R{customer}, $R{location}, $R{street}
 $R{vendor},$R{product}, $R{revision}

Extopus will build the trees as its database gets populated.

As the user selects a node, the live statistical information is sourced from
the original monitoring system.

=head2 Provisioning

Inventory plug-ins are responsible for acquiering data from external
systems. The inventory plugins are tailer made for each typ of external
system.

=head2 Visualisation

Visualization plug-ins take care of presenting the data to the user. As the
user selects a node, the data of the node is run by all configured
visualisation plug-ins. Each plug-in can then decide if it is able to do
something with the data or not. Resulting in different visualization options
depending of the attributes of the node.
 
=head3 Access Control

Extopus can be configured to require a user to log in. It will then provide
this user name to the inventory plug-ins as they go about their job of
importing data. They can then make sure to only import the data appropriate
for the current user.

=head2 User Interface

There are three main elements to the user interface:

=over

=item Tree

Using common attribute values between nodes, Extopus can build tree
representations of the nodes, providing quick hierarchical access to the
information.

=item Search

A google like full text search allows to find any node in the database
quickly

=item Visualization

As a node gets selected, Extopus asks the visualization plug-ins to
visualize the node. Each plugin will decide if and how it can deal with the
node, resulting in a selection of different visualization options for each
node.

=back

=head2 Web Frontend

Extopus comes with a advanced web frontend, written entirely in javascript. This allows to offload
a lot of the presentation work to the browser while keeping a user experiance similar to a desktop application.

=head2 Implementation Languages

The backend is written in Perl using the Mojolicious framework. The frontend
is written in JavaScript using the Qooxdoo framework. Building on two full
advanced frameworks allows the implementation to progress quickly while
keeping code quality at a high level.

*EOD*
